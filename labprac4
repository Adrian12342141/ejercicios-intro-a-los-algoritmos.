/**
 * Fecha: clase cuyos objetos representan fechas calendarias, para el 
 * calendario gregoriano. Esta clase implementa una variedad de 
 * funcionalidades sobre fechas, como comparaciones, cómputos de días,
 * etc.
 * 
 * @author N. Aguirre 
 * @version 0.1
 */
public class Fecha
{
    // dia de la fecha
    private int dia;
    
    // mes de la fecha
    private int mes;
    
    // año de la fecha
    private int anho;

    /**
     * Constructor por defecto, para la clase fecha.
     * Crea como fecha por defecto la fecha inicial del 
     * calendario gregoriano (15/10/1582)
     */
    public Fecha()
    {
        dia = 15;
        mes = 10;
        anho = 1582;
    }

    /**
     * Constructor de la clase Fecha, que recibe la fecha a 
     * crear como parámetro. La fecha no puede ser previa
     * al 15/10/1582. Debe tenerse en cuenta la creación de
     * fechas válidas, en relación a número de días en los
     * meses, años bisiestos, etc.
     */
    public Fecha(int nuevoDia, int nuevoMes, int nuevoAnho)
    {
        //Verifica si el año es válido
        assert (esPostGregoriano(nuevoDia,nuevoMes,nuevoAnho)): "La fecha no esta en el calendario Gregoriano";
        // Verifica si el mes es válido
        assert (nuevoMes >= 1 && nuevoMes <= 12): "Mes inválido";
        // Verifica si el día es válido
        assert (nuevoDia >= 1 && nuevoDia <= cantDias(nuevoMes, nuevoAnho)): "Día inválido";
        
        dia = nuevoDia;
        mes = nuevoMes;
        anho = nuevoAnho;
    }
    
    /**
     * Retorna el dia de la fecha
     */
    public int obtenerDia() {
        return dia;
    }
    
    /**
     * Retorna el mes de la fecha
     */
    public int obtenerMes() {
        return mes;
    }
    
    /**
     * Retorna el año de la fecha
     */
    public int obtenerAnho() {
        return anho;
    }
     /** 
      * Método para verificar si una fecha está en el calendario gregoriano
      */ 
    private boolean esPostGregoriano(int unDia, int unMes, int unAnho) {
        return (unAnho > 1582) || (unAnho == 1582 && unMes > 10) || (unAnho == 1582 && unMes == 10 && unDia >= 15);
    }
    
    /** 
     * Método para verificar si una fecha es válida
     */
    private boolean esValido(int unDia, int unMes, int unAnho) {
        boolean esValido=true;
        //Chequea si la fecha esta dentro del calendario gregoriano
        if (!esPostGregoriano(unDia,unMes,unAnho)) {
            esValido=false;
        }
        
        // Verificar si el mes es válido
        if (unMes < 1 || unMes > 12) {
            esValido=false;
        }

        // Verificar si el día es válido
        if (unDia < 1 || unDia > cantDias(unMes, unAnho)) {
            esValido=false;
        }

        return esValido;
    }    
    
    /**
     * Cambia el día de la fecha. El nuevo día debe ser válido
     * para el mes y año actuales.
     */
    public void cambiarDia(int nuevoDia) {
        assert (esValido(nuevoDia,mes,anho)): "Ingrese un dia válido";
        dia=nuevoDia;
    }
    
    /**
     * Cambia el mes de la fecha. El nuevo mes debe ser válido
     * para el día y año actuales.
     */
    public void cambiarMes(int nuevoMes) {
        assert (esValido(dia,nuevoMes,anho)): "Ingrese un mes válido";
        mes=nuevoMes;
    }
    
    /**
     * Cambia el año de la fecha. El nuevo año debe ser válido
     * para el día y mes actuales.
     */
    public void cambiarAnho(int nuevoAnho) {
        assert (esValido(dia,mes,nuevoAnho)): "Ingrese un año válido";
        anho=nuevoAnho;
    }
    
    /**
     * Chequea si la fecha es igual a otra fecha dada
     */
    public boolean equals(Fecha otraFecha) {
        return (dia==otraFecha.dia && mes==otraFecha.mes && anho==otraFecha.anho);
    }
    
    /**
     * Chequea si la fecha es anterior a otra fecha dada
     */
    public boolean esAnterior(Fecha otraFecha) {
        boolean anterior = false;
        if(anho<otraFecha.anho){
            anterior=true;
        }else if(anho==otraFecha.anho && mes<otraFecha.mes){
            anterior=true;
        }else if(anho==otraFecha.anho && mes==otraFecha.mes && dia<=otraFecha.dia){
            anterior=true;
        }
        return anterior;
    }
    
    /**
     * Permite avanzar un dia en el calendario
     */
    private void avanzarDia(Fecha unaFecha)
    {
        unaFecha.dia++;
        if (unaFecha.dia > cantDias(unaFecha.mes, unaFecha.anho)) {
            unaFecha.dia = 1;
            unaFecha.mes++;
            if (unaFecha.mes > 12) {
                unaFecha.mes = 1;
                unaFecha.anho++;
            }
        }
        return;
    }    
    
    /**
     * Computa distancia en días entre dos fechas.
     * El parámetro otraFecha debe corresponder a una fecha igual o 
     * posterior a la fecha del objeto.
     */
    public int distancia(Fecha otraFecha) {
        assert (esAnterior(otraFecha)):"La fecha dada es anterior a la fecha que quiere comparar";
        int dias=0;
        Fecha fechaAct = new Fecha(dia,mes,anho);
        
        while(!fechaAct.equals(otraFecha)){
            avanzarDia(fechaAct);   
            dias++;
        }
        return dias;
    }
    
    /**
     * Computa la cantidad de días de un mes dado. El parámetro
     * debe corresponder a un mes válido.
     */
    private int cantDias(int unMes, int unAnho) 
    {
        assert unMes >= 1 && unMes <= 12;
        if (unMes==2){
            if (esBisiesto(unAnho)){
                return 29;
            }else{return 28;}
        }else if(unMes==4 || unMes==6 || unMes==9 || unMes==11){return 30;}
        else{return 31;}
    }
    
    /**
     * Decide si un año dado es bisiesto o no. Un año es bisiesto
     * si es múltiplo de 4, salvo los múltiplos de 100 que no son 
     * múltiplos de 400.
     * El parámetro debe corresponder a un año válido.
     */
    private boolean esBisiesto(int unAnho) 
    {
        assert unAnho >= 1582;
        if ((unAnho%400)==0 || ((unAnho%4)==0 && (unAnho%100)!=0)){
            return true;
        }else{return false;}
    }
    
    public String toString(){
        return (dia + "/" + mes + "/" + anho);
    }
}
